<?= "<?php\n" ?>

namespace <?= $namespace ?>;

use <?= $entity_full_class_name ?>;
use <?= $repository_full_class_name ?>;
use Doctrine\Persistence\ManagerRegistry;

class <?= $class_name ?><?= "\n" ?>
{
    private $managerRegistry;

    public function __construct(ManagerRegistry $managerRegistry)
    {
        $this->managerRegistry = $managerRegistry;
    }

    public function search(
        array $filter,
        array $sort,
        int $page,
        int $perPage
    ): array {
        /** @var <?= $repository_class_name ?> $repository */
        $repository = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class);
        $count = $repository->count($filter);
        if (empty($perPage)) {
            $perPage = $count;
        }
        $entities = $repository->findBy(
            $filter,
            $sort,
            $perPage,
            $perPage * ($page - 1)
        );

        return [$entities, $count];
    }

    public function view($<?= $entity_identifier?>): ?<?= $entity_class_name ?><?= "\n" ?>
    {
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier?> ?? 0);
        if (empty($<?= $entity_var_singular ?>)) {
            return null;
        }

        return $<?= $entity_var_singular ?>;
    }

    public function create(
<?php
    $t = '    ';
    $br = "\n";
    $count = count($entity_setters);
    $counter = 0;
    foreach ($entity_setters as $setter) {
        $param = $setter->getParameters()[0];
        echo $t.$t . '$' . $param->getName();
        if (++$counter !== $count) {
            echo ',';
        }
        echo $br;
    }
?>
    ): <?= $entity_class_name ?> {
        $<?= $entity_var_singular ?> = new <?= $entity_class_name ?>();
<?php
        $t = '    ';
        $br = "\n";
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t
                        . '!empty($' . $param->getName() . ') ? \DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t
                        . 'new \DateTime($' . $param->getName() . ')' . $br.$t.$t.$t
                        . ') : null' . $br.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($' . $param->getName() . ');' . $br;
                }
            } else {
                echo $t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t
                    . '->find('
                    . '$' . $param->getName() . ' ?? 0'
                    . ')' . $br.$t.$t . ';' . $br;
                echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
        }
?>

        $em = $this->managerRegistry->getManager();
        $em->persist($<?= $entity_var_singular ?>);
        $em->flush();

        return $<?= $entity_var_singular ?>;
    }

    public function update(
<?php
    $t = '    ';
    $br = "\n";
    $count = count($entity_setters);
    $counter = 0;
    echo $t.$t.'$' . $entity_identifier;
    if ($count > 0) {
        echo ',';
    }
    echo $br;
    foreach ($entity_setters as $setter) {
        $param = $setter->getParameters()[0];
        echo $t.$t . '$' . $param->getName();
        if (++$counter !== $count) {
            echo ',';
        }
        echo $br;
    }
?>
    ): <?= $entity_class_name ?> {
        $em = $this->managerRegistry->getManager();
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier ?> ?? 0);
        if (empty($<?= $entity_var_singular ?>)) {
            $<?= $entity_var_singular ?> = new <?= $entity_class_name ?>();
            $em->persist($<?= $entity_var_singular ?>);
        }
<?php
        $t = '    ';
        $br = "\n";
        echo $br;
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t
                        . '!empty($' . $param->getName() . ') ? \DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t
                        . 'new \DateTime($' . $param->getName() . ')' . $br.$t.$t.$t
                        . ') : null' . $br.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($' . $param->getName() . ');' . $br;
                }
            } else {
                echo $t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t
                    . '->find('
                    . '$' . $param->getName() . ' ?? 0'
                    . ')' . $br.$t.$t . ';' . $br;
                echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
        }
?>

        $em->flush();

        return $<?= $entity_var_singular ?>;
    }

    public function patch(
<?php
    $t = '    ';
    $br = "\n";
    $count = count($entity_setters);
    $counter = 0;
    echo $t.$t.'$' . $entity_identifier;
    if ($count > 0) {
        echo ',';
    }
    echo $br;
    foreach ($entity_setters as $setter) {
        $param = $setter->getParameters()[0];
        echo $t.$t . '$' . $param->getName();
        if (++$counter !== $count) {
            echo ',';
        }
        echo $br;
    }
?>
    ): ?<?= $entity_class_name ?> {
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier ?> ?? 0);
        if (empty($<?= $entity_var_singular ?>)) {
            return null;
        }

<?php
        $t = '    ';
        $br = "\n";
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            echo $t.$t . 'if (false !== $' . $param->getName() . ') {' . $br;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t.$t
                        . '!empty($' . $param->getName() . ') ? \DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t.$t
                        . 'new \DateTime($' . $param->getName() . ')' . $br.$t.$t.$t.$t
                        . ') : null' . $br.$t.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($' . $param->getName() . ');' . $br;
                }
            } else {
                echo $t.$t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t.$t
                    . '->find('
                    . '$' . $param->getName() . ' ?? 0'
                    . ')' . $br.$t.$t.$t . ';' . $br;
                echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
            echo $t.$t . '}' . $br;
        }
?>

        $em = $this->managerRegistry->getManager();
        $em->flush();

        return $<?= $entity_var_singular ?>;
    }

    public function delete($<?= $entity_identifier?>): bool
    {
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier ?> ?? 0);
        if (empty($<?= $entity_var_singular ?>)) {
            return false;
        }

        $em = $this->managerRegistry->getManager();
        $em->remove($<?= $entity_var_singular ?>);
        $em->flush();

        return true;
    }
}
