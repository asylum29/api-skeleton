<?= "<?php\n" ?>

namespace <?= $namespace ?>;

use <?= $entity_full_class_name ?>;
use <?= $crud_full_class_name ?>;
use App\Exception\ApiException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("<?= $route_path ?>", name="<?= $route_name ?>")
 */
class <?= $class_name ?> extends BaseController<?= "\n" ?>
{
    private $crudManager;

    public function __construct(<?= $crud_class_name ?> $crudManager)
    {
        $this->crudManager = $crudManager;
    }

    /**
     * @Route(
     *     "/",
     *     name="_search",
     *     methods={"GET"}
     * )
     *
     * @param Request $request
     *
     * @return Response
     */
    public function search(Request $request): Response
    {
        $params = $request->query->all();
        unset($params['page']);
        unset($params['perPage']);
        unset($params['sort']);
        $sort = (array) $request->query->get('sort', []);
        $page = $request->query->getInt('page', 1);
        $perPage = $request->query->getInt('perPage');
        list($<?= $entity_var_plural ?>, $count) = $this->crudManager->search($params, $sort, $page, $perPage);

        return $this->success(
            $<?= $entity_var_plural ?>,
            [
                'currentPage' => $page,
                'perPage' => $perPage,
                'pagesTotal' => $count,
            ]
        );
    }

    /**
     * @Route(
     *     "/",
     *     name="_create",
     *     methods={"POST"}
     * )
     *
     * @param Request $request
     *
     * @return Response
     */
    public function create(Request $request): Response
    {
        $<?= $entity_var_singular ?> = $this->crudManager->create(
<?php
            $t = '    ';
            $br = "\n";
            $count = count($entity_setters);
            $counter = 0;
            foreach ($entity_setters as $setter) {
                $param = $setter->getParameters()[0];
                echo $t.$t.$t . '$request->request->get(\'' . $param->getName() . '\')';
                if (++$counter !== $count) {
                    echo ',';
                }
                echo $br;
            }
?>
        );

        $response = $this->success($<?= $entity_var_singular ?>);
        $response->headers->set(
            'Location',
            $this->generateUrl(
                '<?= $route_name ?>_get',
                ['<?= $entity_identifier?>' => $<?= $entity_var_singular ?>->get<?= ucfirst($entity_identifier) ?>()]
            )
        );

        return $response;
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_get",
     *     methods={"GET"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function view($<?= $entity_identifier ?>): Response
    {
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->crudManager->view($<?= $entity_identifier?>);
        if (empty($<?= $entity_var_singular ?>)) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

        return $this->success($<?= $entity_var_singular ?>);
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_update",
     *     methods={"PUT"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param Request $request
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     */
    public function update(Request $request, $<?= $entity_identifier ?>): Response
    {
        $<?= $entity_var_singular ?> = $this->crudManager->update(
<?php
            $t = '    ';
            $br = "\n";
            $count = count($entity_setters);
            $counter = 0;
            echo $t.$t.$t.'$' . $entity_identifier;
            if ($count > 0) {
                echo ',';
            }
            echo $br;
            foreach ($entity_setters as $setter) {
                $param = $setter->getParameters()[0];
                echo $t.$t.$t . '$request->request->get(\'' . $param->getName() . '\')';
                if (++$counter !== $count) {
                    echo ',';
                }
                echo $br;
            }
?>
        );

        $response = $this->success($<?= $entity_var_singular ?>);
        $response->headers->set(
            'Location',
            $this->generateUrl(
                '<?= $route_name ?>_get',
                ['<?= $entity_identifier?>' => $<?= $entity_var_singular ?>->get<?= ucfirst($entity_identifier) ?>()]
            )
        );

        return $response;
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_patch",
     *     methods={"PATCH"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param Request $request
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function patch(Request $request, $<?= $entity_identifier ?>): Response
    {
<?php
        $t = '    ';
        $br = "\n";
        $count = count($entity_setters);
        $counter = 0;
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            echo $t.$t . '$' . $param->getName() . ' = false;' . $br;
            echo $t.$t . 'if ($request->request->has(\''
                . $param->getName() . '\')) {' . $br;
            echo $t.$t.$t . '$' . $param->getName() . ' = '
                . '$request->request->get(\'' . $param->getName() . '\');' . $br;
            echo $t.$t . '}' . $br;
        }
?>

        $<?= $entity_var_singular ?> = $this->crudManager->patch(
<?php
            $t = '    ';
            $br = "\n";
            $count = count($entity_setters);
            $counter = 0;
            echo $t.$t.$t.'$' . $entity_identifier;
            if ($count > 0) {
                echo ',';
            }
            echo $br;
            foreach ($entity_setters as $setter) {
                $param = $setter->getParameters()[0];
                echo $t.$t.$t . '$' . $param->getName();
                if (++$counter !== $count) {
                    echo ',';
                }
                echo $br;
            }
?>
        );
        if (empty($<?= $entity_var_singular ?>)) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

        $response = $this->success($<?= $entity_var_singular ?>);
        $response->headers->set(
            'Location',
            $this->generateUrl(
                '<?= $route_name ?>_get',
                ['<?= $entity_identifier?>' => $<?= $entity_var_singular ?>->get<?= ucfirst($entity_identifier) ?>()]
            )
        );

        return $response;
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_delete",
     *     methods={"DELETE"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function delete($<?= $entity_identifier?>): Response
    {
        $deleted = $this->crudManager->delete($<?= $entity_identifier?>);
        if (!$deleted) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

        return $this->success();
    }
}
