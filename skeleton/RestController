<?= "<?php\n" ?>

namespace <?= $namespace ?>;

use <?= $entity_full_class_name ?>;
use <?= $repository_full_class_name ?>;
use App\Exception\ApiException;
use DateTime;
use DateTimeImmutable;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("<?= $route_path ?>", name="<?= $route_name ?>")
 */
class <?= $class_name ?> extends BaseController<?= "\n" ?>
{
    private $managerRegistry;

    public function __construct(ManagerRegistry $managerRegistry)
    {
        $this->managerRegistry = $managerRegistry;
    }

    /**
     * @Route(
     *     "/",
     *     name="_search",
     *     methods={"GET"}
     * )
     *
     * @param Request $request
     *
     * @return Response
     */
    public function search(Request $request): Response
    {
        /** @var <?= $repository_class_name ?> $repository */
        $repository = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class);
        $params = $request->query->all();
        unset($params['page']);
        unset($params['perPage']);
        unset($params['sort']);
        $page = $request->query->getInt('page', 1);
        $count = $repository->count([]);
        $perPage = $request->query->getInt('perPage', $count);
        $sort = json_decode($request->query->get('sort'), true);
        $<?= $entity_var_plural ?> = $repository->findBy(
            $params,
            $sort,
            $perPage,
            $perPage * ($page - 1)
        );

        return $this->success(
            $<?= $entity_var_plural ?>,
            [
                'currentPage' => $page,
                'perPage' => $perPage,
                'pagesTotal' => $count,
            ]
        );
    }

    /**
     * @Route(
     *     "/",
     *     name="_create",
     *     methods={"POST"}
     * )
     *
     * @param Request $request
     *
     * @return Response
     */
    public function create(Request $request): Response
    {
        $em = $this->managerRegistry->getManager();
        $<?= $entity_var_singular ?> = new <?= $entity_class_name ?>();
<?php
        $t = '    ';
        $br = "\n";
        echo $br;
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t
                        . 'DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t
                        . 'new DateTime(' . '$request->request->get(\'' . $param->getName() . '\'))' . $br.$t.$t.$t
                        . ')' . $br.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($request->request->get(\'' . $param->getName() . '\'));' . $br;
                }
            } else {
                echo $t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t
                    . '->find('
                    . '$request->request->get(\'' . $param->getName() . '\')'
                    . ')' . $br.$t.$t . ';' . $br;
                echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
        }
?>
        $em->persist($<?= $entity_var_singular ?>);
        $em->flush();

        $response = $this
            ->success($<?= $entity_var_singular ?>, ['group' => 'create'])
            ->setStatusCode(Response::HTTP_CREATED);
        $response->headers->set(
            'Location',
            $this->generateUrl(
                '<?= $route_name ?>_get',
                ['<?= $entity_identifier?>' => $<?= $entity_var_singular ?>->get<?= ucfirst($entity_identifier) ?>()]
            )
        );

        return $response;
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_get",
     *     methods={"GET"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function read($<?= $entity_identifier ?>): Response
    {
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier?>);
        if (empty($<?= $entity_var_singular ?>)) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

        return $this->success($<?= $entity_var_singular ?>);
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_update",
     *     methods={"PUT"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param Request $request
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     */
    public function update(Request $request, $<?= $entity_identifier ?>): Response
    {
        $em = $this->managerRegistry->getManager();
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier?>);
        $isCreated = false;
        if (empty($<?= $entity_var_singular ?>)) {
            $<?= $entity_var_singular ?> = new <?= $entity_class_name ?>();
            $isCreated = true;
        }
<?php
        $t = '    ';
        $br = "\n";
        echo $br;
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t
                        . 'DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t
                        . 'new DateTime(' . '$request->request->get(\'' . $param->getName() . '\'))' . $br.$t.$t.$t
                        . ')' . $br.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($request->request->get(\'' . $param->getName() . '\'));' . $br;
                }
            } else {
                echo $t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t
                    . '->find('
                    . '$request->request->get(\'' . $param->getName() . '\')'
                    . ')' . $br.$t.$t . ';' . $br;
                echo $t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
        }
?>
        if ($isCreated) {
            $em->persist($<?= $entity_var_singular ?>);
            $em->flush();
            $response = $this
                ->success($<?= $entity_var_singular ?>, ['group' => 'create'])
                ->setStatusCode(Response::HTTP_CREATED);
            $response->headers->set(
                'Location',
                $this->generateUrl(
                    '<?= $route_name ?>_get',
                    ['<?= $entity_identifier?>' => $<?= $entity_var_singular ?>->get<?= ucfirst($entity_identifier) ?>()]
                )
            );

            return $response;
        } else {
            $em->flush();

            return $this->success();
        }
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_patch",
     *     methods={"PATCH"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param Request $request
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function patch(Request $request, $<?= $entity_identifier ?>): Response
    {
        $em = $this->managerRegistry->getManager();
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier?>);
        if (empty($<?= $entity_var_singular ?>)) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

<?php
        $t = '    ';
        $br = "\n";
        foreach ($entity_setters as $setter) {
            $param = $setter->getParameters()[0];
            $is_simple = strpos($param->getType()->getName(), '\\') === false;
            echo $t.$t . 'if ($request->request->has(\''
                . $param->getName() . '\')) {' . $br;
            if ($is_simple) {
                if (strpos($param->getType()->getName(), 'DateTime') !== false) {
                    echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '(' . $br.$t.$t.$t.$t
                        . 'DateTimeImmutable::createFromMutable(' . $br.$t.$t.$t.$t.$t
                        . 'new DateTime(' . '$request->request->get(\'' . $param->getName() . '\'))' . $br.$t.$t.$t.$t
                        . ')' . $br.$t.$t.$t
                        . ');' . $br;
                } else {
                    echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName()
                        . '($request->request->get(\'' . $param->getName() . '\'));' . $br;
                }
            } else {
                echo $t.$t.$t . '/** @var \\' . $param->getType()->getName() . ' $temp */' . $br.$t.$t.$t
                    . '$temp = $this->managerRegistry' . $br.$t.$t.$t.$t
                    . '->getRepository(\''
                    . $param->getType()->getName() . '\')' . $br.$t.$t.$t.$t
                    . '->find('
                    . '$request->request->get(\'' . $param->getName() . '\')'
                    . ')' . $br.$t.$t.$t . ';' . $br;
                echo $t.$t.$t . '$' . $entity_var_singular . '->' . $setter->getName() . '($temp);' . $br;
            }
            echo $t.$t . '}' . $br;
        }
?>

        $em->flush();

        return $this->success();
    }

    /**
     * @Route(
     *     "/{<?= $entity_identifier ?>}",
     *     name="_delete",
     *     methods={"DELETE"},
     *     requirements={"id":"<?= $entity_identifier_pattern ?>"}
     * )
     *
     * @param $<?= $entity_identifier ?>

     *
     * @return Response
     *
     * @throws ApiException
     */
    public function delete($<?= $entity_identifier?>): Response
    {
        $em = $this->managerRegistry->getManager();
        /** @var <?= $entity_class_name ?> $<?= $entity_var_singular ?> */
        $<?= $entity_var_singular ?> = $this->managerRegistry->getRepository(<?= $entity_class_name ?>::class)->find($<?= $entity_identifier?>);
        if (empty($<?= $entity_var_singular ?>)) {
            $this->error('Not found', Response::HTTP_NOT_FOUND);
        }

        $em->remove($<?= $entity_var_singular ?>);
        $em->flush();

        return $this->success();
    }
}
